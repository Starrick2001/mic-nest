// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: proto/order.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "order";

export interface Order {
  id: number;
  amount: number;
  orderItems: OrderItems | undefined;
}

export interface OrderItem {
  id: number;
  productId: number;
}

export interface OrderItems {
  orderItems: OrderItem[];
}

export interface FindOneDto {
  id: number;
}

function createBaseOrder(): Order {
  return { id: 0, amount: 0, orderItems: undefined };
}

export const Order = {
  encode(message: Order, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int32(message.amount);
    }
    if (message.orderItems !== undefined) {
      OrderItems.encode(message.orderItems, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Order {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.amount = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.orderItems = OrderItems.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      orderItems: isSet(object.orderItems) ? OrderItems.fromJSON(object.orderItems) : undefined,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.orderItems !== undefined) {
      obj.orderItems = OrderItems.toJSON(message.orderItems);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.id = object.id ?? 0;
    message.amount = object.amount ?? 0;
    message.orderItems = (object.orderItems !== undefined && object.orderItems !== null)
      ? OrderItems.fromPartial(object.orderItems)
      : undefined;
    return message;
  },
};

function createBaseOrderItem(): OrderItem {
  return { id: 0, productId: 0 };
}

export const OrderItem = {
  encode(message: OrderItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.productId !== 0) {
      writer.uint32(16).int32(message.productId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.productId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : 0,
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.productId !== 0) {
      obj.productId = Math.round(message.productId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItem>, I>>(base?: I): OrderItem {
    return OrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItem>, I>>(object: I): OrderItem {
    const message = createBaseOrderItem();
    message.id = object.id ?? 0;
    message.productId = object.productId ?? 0;
    return message;
  },
};

function createBaseOrderItems(): OrderItems {
  return { orderItems: [] };
}

export const OrderItems = {
  encode(message: OrderItems, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orderItems) {
      OrderItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderItems {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItems();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orderItems.push(OrderItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItems {
    return {
      orderItems: globalThis.Array.isArray(object?.orderItems)
        ? object.orderItems.map((e: any) => OrderItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrderItems): unknown {
    const obj: any = {};
    if (message.orderItems?.length) {
      obj.orderItems = message.orderItems.map((e) => OrderItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItems>, I>>(base?: I): OrderItems {
    return OrderItems.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItems>, I>>(object: I): OrderItems {
    const message = createBaseOrderItems();
    message.orderItems = object.orderItems?.map((e) => OrderItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFindOneDto(): FindOneDto {
  return { id: 0 };
}

export const FindOneDto = {
  encode(message: FindOneDto, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindOneDto {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneDto {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: FindOneDto): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindOneDto>, I>>(base?: I): FindOneDto {
    return FindOneDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindOneDto>, I>>(object: I): FindOneDto {
    const message = createBaseFindOneDto();
    message.id = object.id ?? 0;
    return message;
  },
};

export interface OrderService {
  FindOne(request: FindOneDto): Promise<Order>;
}

export const OrderServiceServiceName = "order.OrderService";
export class OrderServiceClientImpl implements OrderService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || OrderServiceServiceName;
    this.rpc = rpc;
    this.FindOne = this.FindOne.bind(this);
  }
  FindOne(request: FindOneDto): Promise<Order> {
    const data = FindOneDto.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindOne", data);
    return promise.then((data) => Order.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
